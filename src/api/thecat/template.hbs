// TODO: @merlin lots of these types and schemes are not needed, but
// they will be removed once we move to microservices and have
// separate API for SDK - it will have it's own
// openapi scheme which we will use to generate this client
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable camelcase */
// to fix TS7056 - remove GET '/b/v2/transactions from client


import { Zodios, type ZodiosOptions } from '@zodios/core';

import { TypeOf, zod as z } from '../../zod';

{{#if imports}}
  {{#each imports}}
    import { {{{@key}}} } from "./{{{this}}}"
  {{/each}}
{{/if}}


{{#if types}}
  {{#each types}}
    {{{this}}};
  {{/each}}
{{/if}}

{{#each schemas}}

  const {{@key}}{{#if (lookup ../emittedType @key)}}: z.ZodType<{{@key}}>{{/if}} = {{{this}}};

  export const {{@key}}Schema = {{@key}};
  export type {{@key}} = TypeOf<typeof {{@key}}Schema>;


{{/each}}
export function createApiClient(baseUrl: string, options?: ZodiosOptions) {

  return new Zodios(baseUrl, [
{{#each endpoints}}
  {
  method: "{{method}}",
  path: "{{path}}",
  {{#if @root.options.withAlias}}
    {{#if alias}}
      alias: "{{alias}}",
    {{/if}}
  {{/if}}
  {{#if description}}
    description: `{{description}}`,
  {{/if}}
  {{#if requestFormat}}
    requestFormat: "{{requestFormat}}",
  {{/if}}
  {{#if parameters}}
    parameters: [
    {{#each parameters}}
      {
      name: "{{name}}",
      {{#if description}}
        description: `{{description}}`,
      {{/if}}
      {{#if type}}
        type: "{{type}}",
      {{/if}}
      schema: {{{schema}}}
      },
    {{/each}}
    ],
  {{/if}}
  response: {{{response}}},
  {{#if errors.length}}
    errors: [
    {{#each errors}}
      {
      {{#ifeq status "default" }}
        status: "default",
      {{else}}
        status: {{status}},
      {{/ifeq}}
      {{#if description}}
        description: `{{description}}`,
      {{/if}}
      schema: {{{schema}}}
      },
    {{/each}}
    ]
  {{/if}}
  },
{{/each}}
], options);
}
